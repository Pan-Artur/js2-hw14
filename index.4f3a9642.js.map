{"mappings":"ACEmB,CAAA,KACjB,IAAM,EAAiB,CAAC,EAAO,IACtB,IAAI,QAAQ,AAAC,IAClB,WAAW,IAAM,EAAQ,GAAQ,EACnC,GAGF,SAAS,IAGP,OAAO,KAAK,KAAK,CAAC,AAAiB,IAAjB,KAAK,MAAM,GAFnB,IAGZ,CAEA,IAAM,EAAS,IACT,EAAS,IACT,EAAS,IACT,EAAS,IACT,EAAS,IAET,EAAW,EAAe,CAAC,uBAAuB,EAAE,EAAO,EAAE,CAAC,CAAE,GAChE,EAAW,EAAe,CAAC,uBAAuB,EAAE,EAAO,EAAE,CAAC,CAAE,GAKtE,QAAQ,GAAG,CAAC,CAAC,EAAU,EAJN,EAAe,CAAC,uBAAuB,EAAE,EAAO,EAAE,CAAC,CAAE,GACrD,EAAe,CAAC,uBAAuB,EAAE,EAAO,EAAE,CAAC,CAAE,GACrD,EAAe,CAAC,uBAAuB,EAAE,EAAO,EAAE,CAAC,CAAE,GAER,EAAE,IAAI,CAClE,AAAC,IACC,QAAQ,GAAG,CAAC,EACd,EAEJ,CAAA,IA8BA,AAxBmB,CAAA,KACjB,IAAM,EAAc,AAAC,GACZ,IAAI,QAAQ,AAAC,IAGlB,IAAI,EAAQ,KAAK,KAAK,CAAC,AAAiB,IAAjB,KAAK,MAAM,GAFxB,KAIV,WAAW,IAAM,EAAQ,CAAE,MAAA,EAAO,MAAA,CAAM,GAAI,EAC9C,GAGI,EAAW,EAAY,YACvB,EAAW,EAAY,YAK7B,QAAQ,IAAI,CAAC,CAAC,EAAU,EAJP,EAAY,YACZ,EAAY,YACZ,EAAY,YAEkC,EAAE,IAAI,CAAC,AAAC,IACrE,QAAQ,GAAG,CAAC,CAAC,0CAA0C,EAAE,EAAO,KAAK,CAAC,mBAAmB,EAAE,EAAO,KAAK,CAAC,EAAE,CAAC,CAC7G,GAAG,KAAK,CAAC,AAAC,IACR,QAAQ,KAAK,CAAC,SAAU,EAC1B,EACF,CAAA","sources":["<anon>","src/index.js"],"sourcesContent":["var $35da740d59af89ba$exports = {};\n// Task 1\nconst $35da740d59af89ba$var$startTask1 = ()=>{\n    const delayedPromise = (value, delay)=>{\n        return new Promise((resolve)=>{\n            setTimeout(()=>resolve(value), delay);\n        });\n    };\n    function getRandomDelay() {\n        let min = 1000;\n        let max = 5000;\n        return Math.floor(Math.random() * (max - min) + min);\n    }\n    const delayA = getRandomDelay();\n    const delayB = getRandomDelay();\n    const delayC = getRandomDelay();\n    const delayD = getRandomDelay();\n    const delayE = getRandomDelay();\n    const promiseA = delayedPromise(`promiseA worked during ${delayA}ms`, delayA);\n    const promiseB = delayedPromise(`promiseB worked during ${delayB}ms`, delayB);\n    const promiseC = delayedPromise(`promiseC worked during ${delayC}ms`, delayC);\n    const promiseD = delayedPromise(`promiseD worked during ${delayD}ms`, delayD);\n    const promiseE = delayedPromise(`promiseE worked during ${delayE}ms`, delayE);\n    Promise.all([\n        promiseA,\n        promiseB,\n        promiseC,\n        promiseD,\n        promiseE\n    ]).then((values)=>{\n        console.log(values);\n    });\n};\n$35da740d59af89ba$var$startTask1();\n// Task 2\nconst $35da740d59af89ba$var$startTask2 = ()=>{\n    const randomDelay = (value)=>{\n        return new Promise((resolve)=>{\n            let min = 1000;\n            let max = 5000;\n            let delay = Math.floor(Math.random() * (max - min) + min);\n            setTimeout(()=>resolve({\n                    value: value,\n                    delay: delay\n                }), delay);\n        });\n    };\n    const promiseA = randomDelay(\"promiseA\");\n    const promiseB = randomDelay(\"promiseB\");\n    const promiseC = randomDelay(\"promiseC\");\n    const promiseD = randomDelay(\"promiseD\");\n    const promiseE = randomDelay(\"promiseE\");\n    Promise.race([\n        promiseA,\n        promiseB,\n        promiseC,\n        promiseD,\n        promiseE\n    ]).then((result)=>{\n        console.log(`It turned out to be the fastest promise - ${result.value}, he worked during ${result.delay}ms`);\n    }).catch((error)=>{\n        console.error(\"Error!\", error);\n    });\n};\n$35da740d59af89ba$var$startTask2();\n\n\n//# sourceMappingURL=index.4f3a9642.js.map\n","// Task 1\n\nconst startTask1 = () => {\n  const delayedPromise = (value, delay) => {\n    return new Promise((resolve) => {\n      setTimeout(() => resolve(value), delay);\n    });\n  };\n\n  function getRandomDelay() {\n    let min = 1000;\n    let max = 5000;\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  const delayA = getRandomDelay();\n  const delayB = getRandomDelay();\n  const delayC = getRandomDelay();\n  const delayD = getRandomDelay();\n  const delayE = getRandomDelay();\n\n  const promiseA = delayedPromise(`promiseA worked during ${delayA}ms`, delayA);\n  const promiseB = delayedPromise(`promiseB worked during ${delayB}ms`, delayB);\n  const promiseC = delayedPromise(`promiseC worked during ${delayC}ms`, delayC);\n  const promiseD = delayedPromise(`promiseD worked during ${delayD}ms`, delayD);\n  const promiseE = delayedPromise(`promiseE worked during ${delayE}ms`, delayE);\n\n  Promise.all([promiseA, promiseB, promiseC, promiseD, promiseE]).then(\n    (values) => {\n      console.log(values);\n    }\n  );\n};\n\nstartTask1();\n\n// Task 2\n\nconst startTask2 = () => {\n  const randomDelay = (value) => {\n    return new Promise((resolve) => {\n      let min = 1000;\n      let max = 5000;\n      let delay = Math.floor(Math.random() * (max - min) + min);\n\n      setTimeout(() => resolve({ value, delay }), delay);\n    });\n  };\n\n  const promiseA = randomDelay(\"promiseA\");\n  const promiseB = randomDelay(\"promiseB\");\n  const promiseC = randomDelay(\"promiseC\"); \n  const promiseD = randomDelay(\"promiseD\");\n  const promiseE = randomDelay(\"promiseE\");\n\n  Promise.race([promiseA, promiseB, promiseC, promiseD, promiseE]).then((result) => {\n    console.log(`It turned out to be the fastest promise - ${result.value}, he worked during ${result.delay}ms`,);\n  }).catch((error) => {\n    console.error(\"Error!\", error);\n  });\n};\n\nstartTask2();\n"],"names":["delayedPromise","value","delay","Promise","resolve","setTimeout","getRandomDelay","Math","floor","max","random","delayA","delayB","delayC","delayD","delayE","promiseA","promiseB","all","then","values","console","log","$35da740d59af89ba$var$startTask2","randomDelay","race","result","catch","error"],"version":3,"file":"index.4f3a9642.js.map"}